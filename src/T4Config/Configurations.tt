<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#   
	var configFile = (File.Exists(Host.ResolvePath("app.config"))) ? "app.config" : "web.config";

	KeyValueConfigurationElement[] settings = GetSettings(configFile);	
	ConnectionStringSettingsCollection connectionStrings = GetConnectionStrings(configFile);
#>
namespace T4Config
{
	public interface IConfigurations
	{
	<#  foreach(KeyValueConfigurationElement setting in settings) { #>
		 string <#= setting.Key #> { get; }
	<# } #>
	}

	public class Configurations : IConfigurations
	{
		<#  foreach(KeyValueConfigurationElement setting in settings) { #>
		public string <#= setting.Key #> 
		{
			get 
			{
				return "<#= setting.Value #>";
			}
		}
	<# } #>
	}

	<# if(connectionStrings.Count > 0) { #>
	public interface IConnectionStrings
	{
		<#  foreach(ConnectionStringSettings  setting in connectionStrings) { #>
		string <#= setting.Name #> { get; }
	<# } #>
	}

	public class ConnectionStrings : IConnectionStrings
	{
		<#  foreach(ConnectionStringSettings setting in connectionStrings) { #>
		public string <#= setting.Name #> 
		{
			get 
			{
				return @"<#= setting.ConnectionString #>";
			}
		}
	<# } #>
	}
	<# } #>
}

<#+

public KeyValueConfigurationElement[] GetSettings(string filePath)
{
	return GetConfiguration(filePath).AppSettings.Settings.Cast<KeyValueConfigurationElement>()
			.Where(x => Regex.IsMatch(x.Key, @"^[A-z][A-z0-9]+$"))
			.ToArray();;
}

public ConnectionStringSettingsCollection GetConnectionStrings(string filePath)
{
	return GetConfiguration(filePath).ConnectionStrings.ConnectionStrings;
}

public Configuration GetConfiguration(string filePath)
{
	var configurationFileMap = new ExeConfigurationFileMap();
    configurationFileMap.ExeConfigFilename = this.Host.ResolvePath(filePath);
    return ConfigurationManager.OpenMappedExeConfiguration(configurationFileMap, ConfigurationUserLevel.None);
}

#>
