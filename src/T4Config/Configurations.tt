<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>

<#   
	//###############################################################
	// UPDATE ME TO THE APP or WEB config.
	// Assumption is that this file lives in the same directory
	var configFile = "app.config";
	//###############################################################

	var configurationFileMap = new ExeConfigurationFileMap();
    configurationFileMap.ExeConfigFilename = this.Host.ResolvePath(configFile);
    var configuration = ConfigurationManager.OpenMappedExeConfiguration(configurationFileMap, ConfigurationUserLevel.None);
	
	var connectionStrings = configuration.ConnectionStrings.ConnectionStrings.Count;
#>

namespace T4Config
{
	public interface IConfigurations
	{
	<#  foreach(KeyValueConfigurationElement setting in configuration.AppSettings.Settings) { #>
		string <#= setting.Key #> { get; }
	<# } #>
	}

	public class Configurations : IConfigurations
	{
		<#  foreach(KeyValueConfigurationElement setting in configuration.AppSettings.Settings) { #>
		public string <#= setting.Key #> 
		{
			get 
			{
				return "<#= setting.Value #>";
			}
		}
	<# } #>
	}

	<# if(connectionStrings > 0) { #>
	public interface IConnectionStrings
	{
		<#  foreach(ConnectionStringSettings  setting in configuration.ConnectionStrings.ConnectionStrings) { #>
		string <#= setting.Name #> { get; }
	<# } #>
	}

	public class ConnectionStrings : IConnectionStrings
	{
		<#  foreach(ConnectionStringSettings setting in configuration.ConnectionStrings.ConnectionStrings) { #>
		public string <#= setting.Name #> 
		{
			get 
			{
				return @"<#= setting.ConnectionString #>";
			}
		}
	<# } #>
	}
	<# } #>
}

